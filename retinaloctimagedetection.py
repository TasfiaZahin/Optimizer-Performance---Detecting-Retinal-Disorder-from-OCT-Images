# -*- coding: utf-8 -*-
"""RetinalOCTImageDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TPHN7YxoiJWX_hImmVu0kQGDZvWI8r1O
"""

from __future__ import print_function, division

# http://pytorch.org/
from os.path import exists
from wheel.pep425tags import get_abbr_impl, get_impl_ver, get_abi_tag
platform = '{}{}-{}'.format(get_abbr_impl(), get_impl_ver(), get_abi_tag())
cuda_output = !ldconfig -p|grep cudart.so|sed -e 's/.*\.\([0-9]*\)\.\([0-9]*\)$/cu\1\2/'
accelerator = cuda_output[0] if exists('/dev/nvidia0') else 'cpu'

!pip install -q http://download.pytorch.org/whl/{accelerator}/torch-0.4.1-{platform}-linux_x86_64.whl torchvision
import torch

import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
from torch.autograd import Variable
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy

plt.ion()  # interactive mode

use_gpu = torch.cuda.is_available()
if use_gpu:
    print("Using CUDA")

    
colab = True

if colab:

    from google.colab import drive

    drive.mount('/content/drive')

#     os.chdir('/content/drive/My Drive/Programming/GoogleColab/ML Project')
  #CHANGE HERE
    data_dir = "/content/drive/My Drive/Programming/GoogleColab/ML Project/Data/"

else:

    data_dir = '../../DATA/Sample_Retina/'

TRAIN = 'train'
VAL = 'val'
TEST = 'test'
model_save_name = 'VGG16_pre_trained.pt'

path = data_dir+F"/{model_save_name}"
#CHANGE HERE
save_dir = "/content/drive/My Drive/Programming/GoogleColab/ML Project/Data/SavedFiles"

torch.manual_seed(1)

if torch.cuda.is_available():

  print("Cuda Seed")

  torch.cuda.manual_seed_all(1)
  
print("Import done")
####################################################################################################################################################################
  
  
# One issue we can see from the above is that the samples are not of the same size.
# Most neural networks expect the images of a fixed size. 
# Therefore, we will need to write some prepocessing code.

# Rescale: to scale the image
# RandomCrop: to crop from image randomly. This is data augmentation.
# ToTensor: to convert the numpy images to torch images (we need to swap axes).
# swap color axis because
   # numpy image: H x W x C
   # torch image: C X H X W

# VGG-16 Takes 224x224 images as input, so we resize all of them
data_transforms = {
    TRAIN: transforms.Compose([
        # Data augmentation is a good practice for the train set
        # Here, we randomly crop the image to 224x224 and
        # randomly flip it horizontally. 
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
    ]),
    VAL: transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
    ]),
    TEST: transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
    ])
}

# data_dir theke  train test val er kontar jonne kon transfrm hobe thik korlo

image_datasets = {
    x: datasets.ImageFolder(
        os.path.join(data_dir, x), 
        transform=data_transforms[x]
    )
    for x in [TRAIN, VAL, TEST]
}







# torch.utils.data.Dataset is an abstract class representing a dataset. 
#Your custom dataset should inherit Dataset and override the following methods:

# However, we are losing a lot of features by using a simple for loop to iterate over the data. 
# In particular, we are missing out on:
    # Batching the data
    # Shuffling the data
    # Load the data in parallel using multiprocessing workers.
# torch.utils.data.DataLoader is an iterator which provides all these features

dataloaders = {
    x: torch.utils.data.DataLoader(
        image_datasets[x], batch_size=8,
        shuffle=True, num_workers=4
    )
    for x in [TRAIN, VAL, TEST]
}

dataset_sizes = {x: len(image_datasets[x]) for x in [TRAIN, VAL, TEST]}

# for x in [TRAIN, VAL, TEST]:
#     print("Loaded {} images under {}".format(dataset_sizes[x], x))
    
print("Classes: ")
class_names = image_datasets[TRAIN].classes
print(image_datasets[TRAIN].classes)

print("Dataload done")
####################################################################################################################################################################

#CHANGE HERE
# Load the model from pytorch
vgg11 = models.vgg11_bn(pretrained=True)
# vgg13 = models.vgg13_bn(pretrained=True)
# vgg16 = models.vgg16_bn(pretrained=True)
# vgg19 = models.vgg19_bn(pretrained=True)

#CHANGE HERE
currentVgg = vgg11

#CHANGE HERE
currentVggName = 'vgg11'
# currentVggName = 'vgg13'
# currentVggName = 'vgg16'
# currentVggName = 'vgg19'

# vgg16.load_state_dict(torch.load(data_dir+F"/{model_save_name}"))
# print(currentVgg.classifier[6].out_features) # 1000 


# Freeze training for all layers
for param in currentVgg.features.parameters():
    param.require_grad = False

# Newly created modules have require_grad=True by default
num_features = currentVgg.classifier[6].in_features
features = list(currentVgg.classifier.children())[:-1] # Remove last layer
features.extend([nn.Linear(num_features, len(class_names))]) # Add our layer with 4 outputs
currentVgg.classifier = nn.Sequential(*features) # Replace the model classifier
# print(currentVgg)

# If you want to train the model for more than 2 epochs, set this to True after the first run
resume_training = False

if resume_training:
    print("Loading pretrained model..")
    currentVgg.load_state_dict(torch.load(data_dir+'VGG16_v2-OCT_Retina.pt'))
    print("Loaded!")


if use_gpu:
    currentVgg.cuda() #.cuda() will move everything to the GPU side
    
criterion = nn.CrossEntropyLoss()

#CHANGE HERE
optimizer_ft = optim.SGD(currentVgg.parameters(), lr=0.001, momentum=0.9)
# optimizer_ft = optim.Adam(currentVgg.parameters(), lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0, amsgrad=False)

#CHANGE HERE
optimizer_name = "SGD"
# optimizer_name = "ADAM"

exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

print("Vgg Loaded")
####################################################################################################################################################################


def imshow(inp, title=None):
    # permuting the axes according to the value, toTensor er jonnei korse may be
    # (1, 2, 0) mane hocche 0 col -> shobar sesh e jabe, 1-> 1st e, 2 -> majhe
    inp = inp.numpy().transpose((1, 2, 0))
    # plt.figure(figsize=(10, 10))
    plt.axis('off')
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)

def show_databatch(inputs, classes):
    out = torchvision.utils.make_grid(inputs)
    imshow(out, title=[class_names[x] for x in classes])

# Get a batch of training data
# inputs, classes = next(iter(dataloaders[TRAIN]))
# show_databatch(inputs, classes)




##################################################################################################################################################################



def visualize_model(vgg, num_images=6):
    was_training = vgg.training
    
    # Set model for evaluation
    vgg.train(False)
    vgg.eval() # entering evaluation mode
    
    images_so_far = 0
    skip = True
    for i, data in enumerate(dataloaders[TEST]):
        inputs, labels = data
        size = inputs.size()[0]
        print("IN visualize_model: size: ",size)
        if use_gpu:
            inputs, labels = Variable(inputs.cuda(), volatile=True), Variable(labels.cuda(), volatile=True)
        else:
            inputs, labels = Variable(inputs, volatile=True), Variable(labels, volatile=True)
        
        outputs = vgg(inputs) # assumption, onk bishal row return kortese, vgg er jonne ?
        if not skip:
          print("IN visualize_model: outputs SHOBB: ") # check dimension
          print(outputs)
          skip = True
        
        # which dimension to reduce, 0-> y axis, 1->x axis(row wise) 
        _, preds = torch.max(outputs.data, 1) # proti row er max value r index back kore, value is not important
        
        predicted_labels = [preds[j] for j in range(inputs.size()[0])]
        
        print("Ground truth:")
        show_databatch(inputs.data.cpu(), labels.data.cpu())
        print("Prediction:")
        show_databatch(inputs.data.cpu(), predicted_labels)
        
        del inputs, labels, outputs, preds, predicted_labels
        torch.cuda.empty_cache()
        
        images_so_far += size
        if images_so_far >= num_images:
            break
        
    vgg.train(mode=was_training) # Revert model back to original training state


# criterion hocche duita parameter er moddhe comparison er basis e error kemon ta ber kore dibe
def eval_model(vgg, criterion):
    since = time.time()
    avg_loss = 0.0
    avg_acc = 0.0
    loss_test = 0.0
    acc_test = 0.0
    confusion_matrix = torch.zeros(len(class_names), len(class_names))
    
    test_batches = len(dataloaders[TEST])
    print("eval_model: ",test_batches)
    print("Evaluating model")
    print('-' * 10)
    
    for i, data in enumerate(dataloaders[TEST]):
        if i % 100 == 0:
            print("\rTest batch {}/{}".format(i, test_batches), end='', flush=True)

        vgg.train(False)
        vgg.eval()
        inputs, labels = data

        if use_gpu:
            inputs, labels = Variable(inputs.cuda(), volatile=True), Variable(labels.cuda(), volatile=True)
        else:
            inputs, labels = Variable(inputs, volatile=True), Variable(labels, volatile=True)

        outputs = vgg(inputs)

        _, preds = torch.max(outputs.data, 1)
        loss = criterion(outputs, labels)
        
        for t, p in zip(labels.view(-1), preds.view(-1)):
                  confusion_matrix[t.long(), p.long()] += 1

#         loss_test += loss.data[0]
        loss_test += loss.item()
        acc_test += torch.sum(preds == labels.data)
#         print("inneraccuracy: acc_test: ",float(acc_test) )
      
        del inputs, labels, outputs, preds
        torch.cuda.empty_cache()
    
    print("Eval Model: loss_test: ",loss_test)
    print("Eval Model: acc_test: ",acc_test)
    
    avg_loss = loss_test / dataset_sizes[TEST]
    print("size",dataset_sizes[TEST])
    
    print(type(dataset_sizes[TEST]), " ",type(acc_test))
    
    avg_acc = float(float(acc_test) / float(dataset_sizes[TEST]) )
    
    elapsed_time = time.time() - since
    print()
    print("Evaluation completed in {:.0f}m {:.0f}s".format(elapsed_time // 60, elapsed_time % 60))
    print("Avg loss (test): {:.4f}".format(avg_loss))
    print("Avg acc (test): {:.4f}".format(avg_acc))
    print('-' * 10)
    print("Confusion Matrix:\n",confusion_matrix)
    print("Per class accuracy:\n",confusion_matrix.diag()/confusion_matrix.sum(1))
    
    cm = confusion_matrix.numpy()
    
    TP = np.diag(cm) # true positives
    FP = np.sum(cm, axis=0) - TP # false positives
    FN = np.sum(cm, axis=1) - TP #false negatives
    
    #true negatives
    num_classes = len(class_names)
    TN = []
    for i in range(num_classes):
        temp = np.delete(cm, i, 0)    # delete ith row
        temp = np.delete(temp, i, 1)  # delete ith column
        TN.append(sum(sum(temp)))
        
#     for i in range(num_classes):
#       print(TP[i] + FP[i] + FN[i] + TN[i])
    
    precision = TP/(TP+FP)
    recall = TP/(TP+FN)
    
#     print("Precision: ",precision)
#     print("Recall: ",recall)
   
    TPR = TP / (TP + FN)  # Recall
    print("True Positive Rate/Recall:", TPR)

    TNR = TN / (FP + TN)  # specificity
    print("True Negative Rate/Specificity:", TNR)

    PPV = TP / (TP + FP)  # precision
    print("Positive Predictive Value/Precision:", PPV)

    FDR = FP / (TP + FP)
    print("False Discovery Rate:", FDR)

    F1 = 2 / ((1 / TPR) + (1 / PPV))
    print("F1 Score:", F1)
    
    

##################################################################################################################################################################

##################################################################################################################################################################





#  parameter scheduler is an LR scheduler object from torch.optim.lr_scheduler
def train_model(vgg, criterion, optimizer, scheduler, num_epochs=10):
    since = time.time()
    best_model_wts = copy.deepcopy(vgg.state_dict()) # weights
    best_acc = 0.0
    
    avg_loss = 0
    avg_acc = 0
    avg_loss_val = 0
    avg_acc_val = 0
    
    train_batches = len(dataloaders[TRAIN])
    val_batches = len(dataloaders[VAL])
    
    for epoch in range(num_epochs):
        print("Epoch {}/{}".format(epoch, num_epochs))
        print('-' * 10)
        
        loss_train = 0.0
        loss_val = 0.0
        acc_train = 0.0
        acc_val = 0.0
        
#         scheduler.step()
        vgg.train(True)
        
        for i, data in enumerate(dataloaders[TRAIN]):
            if i % 100 == 0:
                print("\rTraining batch {}/{}".format(i, train_batches / 2), end='', flush=True)
                
            # Use half training dataset
            if i >= train_batches / 2:
                break
                
            inputs, labels = data
            
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)
            
            # zero the parameter gradients
            optimizer.zero_grad()
            
            outputs = vgg(inputs)
            
            _, preds = torch.max(outputs.data, 1)
            loss = criterion(outputs, labels)
            
            loss.backward()
            optimizer.step()
            
            loss_train += loss.data[0]
            acc_train += float(torch.sum(preds == labels.data) )
#             print("innerloop acc_train: ",acc_train)
            del inputs, labels, outputs, preds
            torch.cuda.empty_cache()
        
        print()
        # * 2 as we only used half of the dataset
        avg_loss = loss_train * 2 / dataset_sizes[TRAIN]
        avg_acc = acc_train * 2 / dataset_sizes[TRAIN]
        
        vgg.train(False)
        vgg.eval()
            
        for i, data in enumerate(dataloaders[VAL]):
            if i % 100 == 0:
                print("\rValidation batch {}/{}".format(i, val_batches), end='', flush=True)
                
            inputs, labels = data
            
            if use_gpu:
                inputs, labels = Variable(inputs.cuda(), volatile=True), Variable(labels.cuda(), volatile=True)
            else:
                inputs, labels = Variable(inputs, volatile=True), Variable(labels, volatile=True)
            
            optimizer.zero_grad()
            
            outputs = vgg(inputs)
            
            _, preds = torch.max(outputs.data, 1)
            loss = criterion(outputs, labels)
            
            loss_val += loss.data[0]
            acc_val += float(torch.sum(preds == labels.data) )
            
            del inputs, labels, outputs, preds
            torch.cuda.empty_cache()
        
        avg_loss_val = loss_val / dataset_sizes[VAL]
        avg_acc_val = acc_val / dataset_sizes[VAL]
        
        print()
        print("Epoch {} result: ".format(epoch))
        print("Avg loss (train): {:.4f}".format(avg_loss))
        print("Avg acc (train): {:.4f}".format(avg_acc))
        print("Avg loss (val): {:.4f}".format(avg_loss_val))
        print("Avg acc (val): {:.4f}".format(avg_acc_val))
        print('-' * 10)
        print()
        
        model_epoch_save_name = currentVggName + '_' +optimizer_name + '_epoch_'+str(epoch)+'.pt'
        path = save_dir+F"/{model_epoch_save_name}" 

        torch.save(currentVgg.state_dict(), path)

        
        if avg_acc_val > best_acc:
#             print("Vitore dhuksi :'( : ",avg_acc_val," ",best_acc)
            best_acc = avg_acc_val
            best_model_wts = copy.deepcopy(vgg.state_dict())
        
    elapsed_time = time.time() - since
    print()
    print("Training completed in {:.0f}m {:.0f}s".format(elapsed_time // 60, elapsed_time % 60))
    print("Best acc: {:.4f}".format(best_acc))
    
    vgg.load_state_dict(best_model_wts)
    return vgg

  
  
  
print("training Start...")
  
  
currentVgg = train_model(currentVgg, criterion, optimizer_ft, exp_lr_scheduler, num_epochs=2)

# path = F"/content/drive/My Drive/{model_save_name}" 
model_epoch_save_name = currentVggName + '_' +optimizer_name + '_epoch_final'+'.pt'
path = save_dir+F"/{model_epoch_save_name}" 

torch.save(currentVgg.state_dict(), path)

print(path)

print("evaluation start...")

eval_model(currentVgg, criterion)

print("visualizing...")

visualize_model(currentVgg, num_images=10)